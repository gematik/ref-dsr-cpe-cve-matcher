#
#   Copyright 2023 gematik GmbH
#  
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#  
#       http://www.apache.org/licenses/LICENSE-2.0
#  
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#  

import os
import sys
import json
import ast
import nvdlib

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))
from lib.cpeguesser import CPEGuesser

def extract_cve_info(data):
    for entry in data:
        cve_id = getattr(entry, 'id', 'N/A')
        severity = getattr(entry, 'v2severity', 'N/A')
        
        device_names = []
        for config in getattr(entry, 'configurations', []):
            for node in getattr(config, 'nodes', []):
                for cpeMatch in getattr(node, 'cpeMatch', []):
                    criteria = getattr(cpeMatch, 'criteria', '')
                    if 'samsung' in criteria:
                        device_names.append(criteria.split(':')[-4])

        devices = ', '.join(device_names) if device_names else 'N/A'
        
        print(f"CVE-ID: {cve_id}")
        print(f"Severity: {severity}")
        print(f"Devices: {devices}")
        print("-" * 40)


def extract_cpes(data):
    # reformat [[63047, "cpe:2.3:h:samsung:galaxy_s6_edge"], ...] -> ["cpe:2.3:h:samsung:galaxy_s6_edge:63047", ...]
    return [f"{entry[1]}:{entry[0]}" for entry in data]


def guess_cpes(device_info):
    # Uses CPE Guesser:
    cpeGuesser = CPEGuesser()
    return json.dumps(cpeGuesser.guessCpe(device_info))

def normalize_cpe(cpe_str):
    # Split the CPE string by colons
    parts = cpe_str.split(":")

    # Check how many parts are missing to reach a total length of 7 parts
    missing_parts = 7 - len(parts)

    # If there are missing parts, append '*' to fill in the gaps
    if missing_parts > 0:
        parts.extend(["*"] * missing_parts)

    # Combine the parts back into a single string and return it
    return ":".join(parts)


def findCPEandCVE(device_info_input):
    guessed_cpes = guess_cpes(device_info_input)
    print(guessed_cpes)

    if not guessed_cpes:
        print(f"No CPEs found for {device_info_input}")
    else:
        print(guessed_cpes)
        guessed_cpes = ast.literal_eval(guessed_cpes)
        guessed_cpes = extract_cpes(guessed_cpes) 
        print(guessed_cpes)
        for cpe in guessed_cpes:
            cpe = normalize_cpe(cpe)
            cves = nvdlib.searchCVE(cpeName = cpe)
            print(cpe)
            if not cves:
                pass
            else:
                extract_cve_info(cves)